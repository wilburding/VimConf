# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3:/* data */}
	};
snippet tpcl
	class ${1:class_name}
	{
	public:
		${2:return_type} ${3:function_name}(${4:arguments})
		{
			${5}
		}
	};
snippet forit
	for (${1:container_type}::iterator it = ${2:container}.begin(); it != $2.end(); ++it) {
		${3:/* code */}
	}
snippet forcit
	for (${1:container_type}::const_iterator it = ${2:container}.begin(); it != $2.end(); ++it) {
		${3:/* code */}
	}
